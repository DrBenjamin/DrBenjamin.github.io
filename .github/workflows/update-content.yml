name: Update and deploy to GitHub Pages

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * *"
  repository_dispatch:
    types: [content-update]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: content-update
  cancel-in-progress: false

jobs:
  update-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Analytical Skills source
        uses: actions/checkout@v4
        with:
          repository: DrBenjamin/Analytical-Skills-for-Business
          path: source-analytical

      - name: Checkout Data Science source
        uses: actions/checkout@v4
        with:
          repository: DrBenjamin/Data-Science-and-Data-Analytics
          path: source-datasci

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "release"
          use-public-rspm: true

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          tinytex: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install repository dependencies (R via renv.lock, Python via requirements.txt)
        run: |
          set -euo pipefail

          REPOS=(source-analytical source-datasci)

          install_r_from_renv() {
            local dir="$1"
            local lock_file="${dir}/r-code/renv.lock"
            if [ -f "$lock_file" ]; then
              echo "-- Installing R packages for ${dir} from renv.lock (manual parse)"
              Rscript -e 'lock_path <- "'"${lock_file}"'";
                if(!requireNamespace("jsonlite", quietly=TRUE)) install.packages("jsonlite", repos="https://cloud.r-project.org");
                pkgs <- names(jsonlite::fromJSON(lock_path)$Packages);
                installed <- rownames(installed.packages());
                missing <- setdiff(pkgs, installed);
                if(length(missing)) { install.packages(missing, repos="https://cloud.r-project.org"); } else { message("No new R packages needed."); }
                core <- c("knitr","rmarkdown"); core_missing <- core[!vapply(core, requireNamespace, logical(1), quietly=TRUE)];
                if(length(core_missing)) install.packages(core_missing, repos="https://cloud.r-project.org");
                ip <- as.data.frame(installed.packages()[,c("Package","Version")]);
                utils::write.csv(ip, file="'"${dir}"'-r-packages.csv", row.names=FALSE);
                cat("Installed/available versions for render-critical packages:\n");
                for(p in core) cat(p, ":", if(requireNamespace(p, quietly=TRUE)) as.character(utils::packageVersion(p)) else "(missing)", "\n")'
            else
              echo "No renv.lock found for ${dir} (expected at r-code/renv.lock)"
            fi
          }

          install_python_reqs() {
            local dir="$1"
            local req_file="${dir}/python/requirements.txt"
            if [ -f "$req_file" ]; then
              echo "-- Installing Python packages for ${dir} from requirements.txt"
              python -m pip install --upgrade pip
              pip install -r "$req_file"
              pip freeze > "${dir}-pip-freeze.txt"
            else
              echo "No Python requirements.txt for ${dir} (expected at python/requirements.txt)"
            fi
          }

          for r in "${REPOS[@]}"; do
            if [ -d "$r" ]; then
              install_r_from_renv "$r" || echo "R install failed for $r (continuing)"
              install_python_reqs "$r" || echo "Python install failed for $r (continuing)"
            else
              echo "Directory $r missing; skipping"
            fi
          done

          echo "-- Verifying render-critical R packages (knitr, rmarkdown) --"
          Rscript -e 'core <- c("knitr","rmarkdown"); miss <- core[!vapply(core, requireNamespace, logical(1), quietly=TRUE)]; if(length(miss)) { install.packages(miss, repos="https://cloud.r-project.org"); miss2 <- core[!vapply(core, requireNamespace, logical(1), quietly=TRUE)]; if(length(miss2)) stop("Missing required R packages even after install: ", paste(miss2, collapse=",")); } cat("Core packages present:\n"); for(p in core) cat(p, ":", as.character(packageVersion(p)), "\n")'

          echo "-- R Library Paths & Selected Package Versions --"
          Rscript -e 'cat(".libPaths():\n"); cat(paste(" -", .libPaths()), sep="\n"); cat("\n"); for(p in c("knitr","rmarkdown","RefManageR")) { cat(p, ": "); if(requireNamespace(p, quietly=TRUE)) cat(as.character(utils::packageVersion(p)),"\n") else cat("(missing)\n"); }'

          echo "Generated package listing files:"
          ls -1 *-r-packages.csv *-pip-freeze.txt 2>/dev/null || echo "(none)"

      - name: Render QMD files and collect artifacts
        run: |
          set -euo pipefail

          ANALYTICAL_QMD="Analytical_Skills_for_Business.qmd"
          DATASCI_QMD="Data_Science_and_Data_Analytics.qmd"

          ANALYTICAL_HTML_SLUG="analytical-skills.html"
          DATASCI_HTML_SLUG="data-science-analytics.html"
          ANALYTICAL_PDF="Analytical_Skills_for_Business.pdf"
          DATASCI_PDF="Data_Science_and_Data_Analytics.pdf"

          ANY_CHANGED=false

          render_course() {
            local SRC_DIR=$1
            local QMD=$2
            local HTML_SLUG=$3
            local PDF_NAME=$4
            local LABEL=$5

            echo "--- Rendering ${LABEL} (${QMD}) ---"
            if [ ! -f "${SRC_DIR}/${QMD}" ]; then
              echo "::warning::Missing QMD ${QMD} in ${SRC_DIR}; skipping ${LABEL}"
              return 0
            fi

            pushd "$SRC_DIR" >/dev/null
            echo "Running: quarto render ${QMD}"
            if ! quarto render "${QMD}"; then
              echo "::error::Quarto render failed for ${QMD}"
              popd >/dev/null
              return 0
            fi

            local STEM="${QMD%.qmd}"
            local RAW_HTML="${STEM}.html"
            local RAW_PDF="${STEM}.pdf"

            if [ -f "$RAW_HTML" ]; then
              if [ -f "../${HTML_SLUG}" ] && cmp -s "$RAW_HTML" "../${HTML_SLUG}"; then
                echo "No change in ${HTML_SLUG}"
              else
                cp "$RAW_HTML" "../${HTML_SLUG}"; echo "Updated ${HTML_SLUG}"; ANY_CHANGED=true
              fi
              if [ -d "${STEM}_files" ]; then
                rm -rf "../${STEM}_files" && cp -R "${STEM}_files" ../ && echo "Copied resource dir ${STEM}_files"; ANY_CHANGED=true
              fi
            else
              echo "::warning::Expected HTML output $RAW_HTML not found for ${LABEL}"
            fi

            if [ -f "$RAW_PDF" ]; then
              if [ -f "../${PDF_NAME}" ] && cmp -s "$RAW_PDF" "../${PDF_NAME}"; then
                echo "No change in ${PDF_NAME}"
              else
                cp "$RAW_PDF" "../${PDF_NAME}"; echo "Updated ${PDF_NAME}"; ANY_CHANGED=true
              fi
            else
              echo "::warning::PDF not produced (expected ${RAW_PDF}) for ${LABEL}"
            fi

            popd >/dev/null
          }

          FAILED_COUNT=0
            render_course source-analytical "$ANALYTICAL_QMD" "$ANALYTICAL_HTML_SLUG" "$ANALYTICAL_PDF" "Analytical Skills for Business" || FAILED_COUNT=$((FAILED_COUNT+1))
            render_course source-datasci "$DATASCI_QMD" "$DATASCI_HTML_SLUG" "$DATASCI_PDF" "Data Science and Data Analytics" || FAILED_COUNT=$((FAILED_COUNT+1))

          if [ $FAILED_COUNT -ge 2 ]; then
            echo "::error::All course renders failed. Failing job."
            exit 1
          fi

          if [ "$ANY_CHANGED" = true ]; then
            echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CONTENT_CHANGED=false" >> $GITHUB_ENV
            echo "No course content changes detected."
          fi

      - name: Commit and push changes (if any)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ "${CONTENT_CHANGED}" != 'true' ]; then
            echo "Skipping commit step (no content changed)."
            exit 0
          fi

          git add analytical-skills.html data-science-analytics.html \
                  Analytical_Skills_for_Business.pdf Data_Science_and_Data_Analytics.pdf || true

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Auto-update: Sync course content

          Rebuilt from QMD sources using Quarto:
          - Analytical: Analytical_Skills_for_Business.qmd
          - Data Science: Data_Science_and_Data_Analytics.qmd

          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    runs-on: ubuntu-latest
    needs: update-content
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
