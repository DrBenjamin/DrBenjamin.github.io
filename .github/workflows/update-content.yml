name: Update and deploy to GitHub Pages

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * *"
  repository_dispatch:
    types: [content-update]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: content-update
  cancel-in-progress: false

jobs:
  update-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Analytical Skills source
        uses: actions/checkout@v4
        with:
          repository: DrBenjamin/Analytical-Skills-for-Business
          path: source-analytical

      - name: Checkout Data Science source
        uses: actions/checkout@v4
        with:
          repository: DrBenjamin/Data-Science-and-Data-Analytics
          path: source-datasci

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "release"
          use-public-rspm: true

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          tinytex: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Setup R library path
        run: |
          # Create a writable R library directory
          mkdir -p "${HOME}/R-library"
          echo "R_LIBS_USER=${HOME}/R-library" >> "$GITHUB_ENV"
          echo "PRIMARY_R_LIB=${HOME}/R-library" >> "$GITHUB_ENV"
          # Set this for current session too
          export R_LIBS_USER="${HOME}/R-library"
          echo "R library path set to: ${HOME}/R-library"

      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: r-lib-${{ runner.os }}-${{ hashFiles('source-analytical/r-code/renv.lock', 'source-datasci/r-code/renv.lock') }}
          restore-keys: |
            r-lib-${{ runner.os }}-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('source-analytical/python/requirements.txt', 'source-datasci/python/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Restore apt cache archive
        uses: actions/cache@v4
        with:
          # Single tarball containing /var/cache/apt and /var/lib/apt/lists
          path: apt-cache.tgz
          # Bump version suffix to invalidate / refresh cache when changing system package set
          key: apt-cache-${{ runner.os }}-v1
          restore-keys: |
            apt-cache-${{ runner.os }}-

      - name: Load apt cache (if present)
        run: |
          set -euo pipefail
          if [ -f apt-cache.tgz ]; then
            echo "Found apt-cache.tgz â€“ restoring to system locations"
            # Extract with sudo so ownership/permissions are preserved where possible
            sudo tar xzf apt-cache.tgz -C /
            echo "Apt cache restored."
          else
            echo "No existing apt cache archive to restore."
          fi

      - name: Install system libraries for R packages
        run: |
          set -euo pipefail
          echo "Updating apt package index"
          sudo apt-get update -y
          echo "Installing core build tooling (build-essential, pkg-config)"
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            pkg-config
          # NOTE: r-base-dev removed (R provided by setup-r; r-base-dev pulls large Perl/dev tool chain)
          echo "Installing libraries for curl, XML, fonts, text shaping, images"
          sudo apt-get install -y --no-install-recommends \
            libcurl4-openssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libpng-dev \
            libjpeg-dev \
            libtiff5-dev
          echo "Installing git + libgit2 for usethis/gert"
          sudo apt-get install -y --no-install-recommends \
            git \
            libgit2-dev
          echo "Installing spatial / geospatial stack (sf, terra, rnaturalearth)"
          sudo apt-get install -y --no-install-recommends \
            libgdal-dev \
            libgeos-dev \
            libproj-dev \
            libudunits2-dev
          echo "Skipping apt clean to allow caching (Option B)"
          echo "System dependency installation complete"

      - name: Save apt cache archive
        # This step always (re)creates the archive; actions/cache will only upload on a key miss.
        run: |
          set -euo pipefail
            echo "Creating apt cache archive for future runs"
            sudo tar czf apt-cache.tgz /var/cache/apt /var/lib/apt/lists || echo "Tar creation had non-fatal warnings"
            ls -lh apt-cache.tgz || true
            echo "Apt cache archive ready (upload occurs only if primary cache key was a miss)."

      - name: Install repository dependencies (R via renv.lock, Python via requirements.txt)
        run: |
          set -euo pipefail

          REPOS=(source-analytical source-datasci)

          # Install R packages using our dedicated script
          echo "=== Installing R packages ==="
          RENV_LOCK_FILES=""
          for r in "${REPOS[@]}"; do
            if [ -d "$r" ] && [ -f "$r/r-code/renv.lock" ]; then
              RENV_LOCK_FILES="$RENV_LOCK_FILES $r/r-code/renv.lock"
            fi
          done
          
          if [ -n "$RENV_LOCK_FILES" ]; then
            export RENV_LOCK_FILES
            Rscript install-r-packages.R $RENV_LOCK_FILES
          else
            echo "No renv.lock files found, installing critical packages only"
            Rscript install-r-packages.R
          fi

          # Install Python packages
          echo "=== Installing Python packages ==="
          install_python_reqs() {
            local dir="$1"
            local req_file="${dir}/python/requirements.txt"
            if [ -f "$req_file" ]; then
              echo "-- Installing Python packages for ${dir} from requirements.txt"
              python -m pip install --upgrade pip
              pip install -r "$req_file"
              pip freeze > "${dir}-pip-freeze.txt"
            else
              echo "No Python requirements.txt for ${dir} (expected at python/requirements.txt)"
              echo "# no python manifest found" > "${dir}-pip-freeze.txt"
            fi
          }

          for r in "${REPOS[@]}"; do
            if [ -d "$r" ]; then
              install_python_reqs "$r" || echo "Python install failed for $r (continuing)"
            else
              echo "Directory $r missing; skipping Python packages"
            fi
          done

          echo "Generated package listing files:"
          ls -1 *-pip-freeze.txt 2>/dev/null || echo "(no Python freeze files)"

      - name: Verify critical R packages
        run: |
          set -euo pipefail
          echo "Verifying critical R packages (knitr, rmarkdown, RefManageR)"
          cat > /tmp/verify_critical_packages.R <<'R_EOF'
          # Verify critical R packages are installed and print versions
          crit <- c("knitr", "rmarkdown", "RefManageR")
          miss <- crit[!vapply(crit, requireNamespace, logical(1), quietly = TRUE)]
          if (length(miss)) {
            writeLines(paste0("::error::Missing critical packages: ", paste(miss, collapse = ",")))
            quit(status = 1)
          }
          cat("All critical packages present:\n")
          for (p in crit) cat(p, ": ", as.character(packageVersion(p)), "\n", sep = "")
          R_EOF
          Rscript /tmp/verify_critical_packages.R

      - name: Render QMD files and collect artifacts
        run: |
          set -euo pipefail

          ANALYTICAL_QMD="Analytical_Skills_for_Business.qmd"
          DATASCI_QMD="Data_Science_and_Data_Analytics.qmd"

          ANALYTICAL_HTML_SLUG="analytical-skills.html"
          DATASCI_HTML_SLUG="data-science-analytics.html"
          ANALYTICAL_PDF="Analytical_Skills_for_Business.pdf"
          DATASCI_PDF="Data_Science_and_Data_Analytics.pdf"

          ANY_CHANGED=false

          render_course() {
            local SRC_DIR=$1
            local QMD=$2
            local HTML_SLUG=$3
            local PDF_NAME=$4
            local LABEL=$5

            echo "--- Rendering ${LABEL} (${QMD}) ---"
            if [ ! -f "${SRC_DIR}/${QMD}" ]; then
              echo "::warning::Missing QMD ${QMD} in ${SRC_DIR}; skipping ${LABEL}"
              return 0
            fi

            pushd "$SRC_DIR" >/dev/null
            echo "Running: quarto render ${QMD}"
            if ! quarto render "${QMD}"; then
              echo "::error::Quarto render failed for ${QMD}"
              popd >/dev/null
              return 0
            fi

            local STEM="${QMD%.qmd}"
            local RAW_HTML="${STEM}.html"
            local RAW_PDF="${STEM}.pdf"

            if [ -f "$RAW_HTML" ]; then
              if [ -f "../${HTML_SLUG}" ] && cmp -s "$RAW_HTML" "../${HTML_SLUG}"; then
                echo "No change in ${HTML_SLUG}"
              else
                cp "$RAW_HTML" "../${HTML_SLUG}"; echo "Updated ${HTML_SLUG}"; ANY_CHANGED=true
              fi
              if [ -d "${STEM}_files" ]; then
                rm -rf "../${STEM}_files" && cp -R "${STEM}_files" ../ && echo "Copied resource dir ${STEM}_files"; ANY_CHANGED=true
              fi
            else
              echo "::warning::Expected HTML output $RAW_HTML not found for ${LABEL}"
            fi

            if [ -f "$RAW_PDF" ]; then
              if [ -f "../${PDF_NAME}" ] && cmp -s "$RAW_PDF" "../${PDF_NAME}"; then
                echo "No change in ${PDF_NAME}"
              else
                cp "$RAW_PDF" "../${PDF_NAME}"; echo "Updated ${PDF_NAME}"; ANY_CHANGED=true
              fi
            else
              echo "::warning::PDF not produced (expected ${RAW_PDF}) for ${LABEL}"
            fi

            popd >/dev/null
          }

          FAILED_COUNT=0
            render_course source-analytical "$ANALYTICAL_QMD" "$ANALYTICAL_HTML_SLUG" "$ANALYTICAL_PDF" "Analytical Skills for Business" || FAILED_COUNT=$((FAILED_COUNT+1))
            render_course source-datasci "$DATASCI_QMD" "$DATASCI_HTML_SLUG" "$DATASCI_PDF" "Data Science and Data Analytics" || FAILED_COUNT=$((FAILED_COUNT+1))

          if [ $FAILED_COUNT -ge 2 ]; then
            echo "::error::All course renders failed. Failing job."
            exit 1
          fi

          if [ "$ANY_CHANGED" = true ]; then
            echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CONTENT_CHANGED=false" >> $GITHUB_ENV
            echo "No course content changes detected."
          fi

      - name: Commit and push changes (if any)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if [ "${CONTENT_CHANGED}" != 'true' ]; then
            echo "Skipping commit step (no content changed)."
            exit 0
          fi

          git add analytical-skills.html data-science-analytics.html \
                  Analytical_Skills_for_Business.pdf Data_Science_and_Data_Analytics.pdf || true

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Auto-update: Sync course content

          Rebuilt from QMD sources using Quarto:
          - Analytical: Analytical_Skills_for_Business.qmd
          - Data Science: Data_Science_and_Data_Analytics.qmd

          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    runs-on: ubuntu-latest
    needs: update-content
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
