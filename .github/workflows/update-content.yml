name: Update Course Content (Analytical + Data Science)

on:
  # Allows manual triggering from Actions tab
  workflow_dispatch:
  
  # Run automatically every day at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'
    
  # Trigger when the main repository is updated
  repository_dispatch:
    types: [content-update]

# Sets permissions to allow the workflow to update content and trigger Pages deployment
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "content-update"
  cancel-in-progress: false

jobs:
  update-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Install R packages (quarto + tidyverse basics)
        run: |
          set -euo pipefail
          Rscript -e 'install.packages(c("tidyverse","knitr","rmarkdown"), repos="https://cloud.r-project.org")'
      - name: Checkout Analytical Skills source
        uses: actions/checkout@v4
        with:
          repository: DrBenjamin/Analytical-Skills-for-Business
          path: source-analytical

      - name: Checkout Data Science source
        uses: actions/checkout@v4
        with:
          repository: DrBenjamin/Data-Science-and-Data-Analytics
          path: source-datasci

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          tinytex: true

      - name: Render QMD files and collect artifacts
        run: |
          set -euo pipefail

          ANALYTICAL_QMD="Analytical_Skills_for_Business.qmd"
          DATASCI_QMD="Data_Science_and_Data_Analytics.qmd"

          # Expected output artifact names (HTML slugs + PDFs)
          ANALYTICAL_HTML_SLUG="analytical-skills.html"
          DATASCI_HTML_SLUG="data-science-analytics.html"
          ANALYTICAL_PDF="Analytical_Skills_for_Business.pdf"
          DATASCI_PDF="Data_Science_and_Data_Analytics.pdf"

          ANY_CHANGED=false

          render_course() {
            local SRC_DIR=$1
            local QMD=$2
            local HTML_SLUG=$3
            local PDF_NAME=$4
            local LABEL=$5

            echo "--- Rendering ${LABEL} (${QMD}) ---"
            if [ ! -f "${SRC_DIR}/${QMD}" ]; then
              echo "::warning::Missing QMD ${QMD} in ${SRC_DIR}; skipping ${LABEL}"
              return 0
            fi

            pushd "$SRC_DIR" >/dev/null
            echo "Running: quarto render ${QMD}"
            if ! quarto render "${QMD}"; then
              echo "::error::Quarto render failed for ${QMD}"
              popd >/dev/null
              return 0
            fi

            # Determine produced HTML (same stem as QMD)
            local STEM="${QMD%.qmd}"
            local RAW_HTML="${STEM}.html"
            local RAW_PDF="${STEM}.pdf"

            if [ ! -f "$RAW_HTML" ]; then
              echo "::warning::Expected HTML output $RAW_HTML not found for ${LABEL}"
            else
              # Move/rename HTML to slug (resource folder keeps original stem name)
              if [ -f "../${HTML_SLUG}" ]; then
                if cmp -s "$RAW_HTML" "../${HTML_SLUG}"; then
                  echo "No change in ${HTML_SLUG}"; 
                else
                  cp "$RAW_HTML" "../${HTML_SLUG}"
                  echo "Updated ${HTML_SLUG}"; ANY_CHANGED=true
                fi
              else
                cp "$RAW_HTML" "../${HTML_SLUG}"; echo "Added ${HTML_SLUG}"; ANY_CHANGED=true
              fi
              # Copy resource directory if exists (always overwrite)
              if [ -d "${STEM}_files" ]; then
                rm -rf "../${STEM}_files"
                cp -R "${STEM}_files" ../
                echo "Copied resource dir ${STEM}_files"
                ANY_CHANGED=true
              fi
            fi

            if [ -f "$RAW_PDF" ]; then
              if [ -f "../${PDF_NAME}" ]; then
                if cmp -s "$RAW_PDF" "../${PDF_NAME}"; then
                  echo "No change in ${PDF_NAME}"; 
                else
                  cp "$RAW_PDF" "../${PDF_NAME}"; echo "Updated ${PDF_NAME}"; ANY_CHANGED=true
                fi
              else
                cp "$RAW_PDF" "../${PDF_NAME}"; echo "Added ${PDF_NAME}"; ANY_CHANGED=true
              fi
            else
              echo "::warning::PDF not produced (expected ${RAW_PDF}) for ${LABEL}";
            fi

            popd >/dev/null
          }

          FAILED_COUNT=0
          render_course source-analytical "$ANALYTICAL_QMD" "$ANALYTICAL_HTML_SLUG" "$ANALYTICAL_PDF" "Analytical Skills for Business" || FAILED_COUNT=$((FAILED_COUNT+1))
          render_course source-datasci "$DATASCI_QMD" "$DATASCI_HTML_SLUG" "$DATASCI_PDF" "Data Science and Data Analytics" || FAILED_COUNT=$((FAILED_COUNT+1))

          if [ $FAILED_COUNT -ge 2 ]; then
            echo "::error::All course renders failed. Failing job."
            exit 1
          fi

          if [ "$ANY_CHANGED" = true ]; then
            echo "CONTENT_CHANGED=true" >> $GITHUB_ENV
          else
            echo "CONTENT_CHANGED=false" >> $GITHUB_ENV
            echo "No course content changes detected."
          fi
          
      - name: Commit and push changes (if any)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ "${CONTENT_CHANGED}" != 'true' ]; then
            echo "Skipping commit step (no content changed)."
            exit 0
          fi

          git add analytical-skills.html data-science-analytics.html \
                  Analytical_Skills_for_Business.pdf Data_Science_and_Data_Analytics.pdf
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "Auto-update: Sync course content

          Rebuilt from QMD sources using Quarto:
          - Analytical: Analytical_Skills_for_Business.qmd
          - Data Science: Data_Science_and_Data_Analytics.qmd

          Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          git push
          
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    runs-on: ubuntu-latest
    needs: update-content
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4